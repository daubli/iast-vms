package de.vms.vulnerability.controller;

import java.util.*;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import de.vms.agent.model.Agent;
import de.vms.agent.model.dto.AgentDto;
import de.vms.incident.model.Incident;
import de.vms.vulnerability.model.Vulnerability;
import de.vms.vulnerability.model.VulnerabilityStatus;
import de.vms.vulnerability.model.dto.HttpRequestDto;
import de.vms.vulnerability.model.dto.IncidentDto;
import de.vms.vulnerability.model.dto.VulnerabilityDto;
import de.vms.vulnerability.model.dto.VulnerabilityListDto;
import de.vms.vulnerability.service.VulnerabilityService;

@RestController
@RequestMapping(path = "/api/vulnerabilities")
public class VulnerabiliyController {

    ModelMapper modelMapper;

    VulnerabilityService vulnerabilityService;

    public VulnerabiliyController(VulnerabilityService vulnerabilityService, ModelMapper modelMapper) {
        this.vulnerabilityService = vulnerabilityService;
        this.modelMapper = modelMapper;
    }

    @GetMapping("/{vulnerabilityId}")
    public ResponseEntity<VulnerabilityDto> getVulnerabilityById(@PathVariable UUID vulnerabilityId) {
        return
                vulnerabilityService.getVulnerabilityById(vulnerabilityId)
                        .map(vulnerability ->
                                ResponseEntity.ok(convertWithAllDetails(vulnerability))
                        ).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @GetMapping("/")
    public ResponseEntity<VulnerabilityListDto> getVulnerabilities() {
        VulnerabilityListDto vulnerabilityListDto = new VulnerabilityListDto(
                vulnerabilityService.getAllVulnerabilities().stream().map(this::convertToDto).collect(
                        Collectors.toList()));
        return ResponseEntity.ok(vulnerabilityListDto);
    }

    @DeleteMapping("/{vulnerabilityId}")
    public void deleteVulnerability(@PathVariable UUID vulnerabilityId) {
        vulnerabilityService.deleteVulnerability(vulnerabilityId);
    }

    @PutMapping("/{vulnerabilityId}/invalid")
    public ResponseEntity<VulnerabilityDto> markAsInvalid(@PathVariable UUID vulnerabilityId) {
        return vulnerabilityService.updateStatusOfVulnerability(vulnerabilityId, VulnerabilityStatus.INVALID)
                .map(vulnerability ->
                        ResponseEntity.ok(convertWithAllDetails(vulnerability)))          //200 OK
                .orElseGet(() -> ResponseEntity.notFound().build());  //404 Not found
    }

    @PutMapping("/{vulnerabilityId}/fixed")
    public ResponseEntity<VulnerabilityDto> markAsFixed(@PathVariable UUID vulnerabilityId) {
        return vulnerabilityService.updateStatusOfVulnerability(vulnerabilityId, VulnerabilityStatus.FIXED)
                .map(vulnerability ->
                        ResponseEntity.ok(convertWithAllDetails(vulnerability)))          //200 OK
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    private VulnerabilityDto convertToDto(Vulnerability vulnerability) {
        return modelMapper.map(vulnerability, VulnerabilityDto.class);
    }

    private VulnerabilityDto convertWithAllDetails(Vulnerability vulnerability) {
        VulnerabilityDto vulnerabilityDto = convertToDto(vulnerability);

        List<Incident> incidents = new ArrayList<>(vulnerability.getIncidents());
        Set<Agent> detectedOnAgentsCollectorSet = new HashSet<>();

        for (Incident incident : incidents) {
            IncidentDto map = modelMapper.map(incident, IncidentDto.class);
            HttpRequestDto map1 = modelMapper.map(incident.getHttpRequestEntity(),
                    HttpRequestDto.class);
            map.setHttpRequest(map1);
            map.setStackTrace(
                    incident.getStackTrace().getStackOfCalls());
            vulnerabilityDto.addIncident(map);
            detectedOnAgentsCollectorSet.addAll(incident.getDetectedOnAgents());
        }

        Set<AgentDto> detectedOnAgentDtos = detectedOnAgentsCollectorSet.stream().map(agent -> {
            AgentDto agentDto = new AgentDto();
            agentDto.setId(agent.getId());
            agentDto.setName(agent.getName());
            agentDto.setLastSeen(agent.getLastSeen());
            return agentDto;
        }).collect(Collectors.toSet());

        vulnerabilityDto.setDetectedOnAgentsOrNull(detectedOnAgentDtos);

        return vulnerabilityDto;
    }
}
