package de.vms.vulnerability.service;

import java.util.List;

import org.springframework.stereotype.Service;

import de.vms.vulnerability.model.Severity;
import de.vms.vulnerability.model.Vulnerability;

@Service
public class ScoreService {

    private VulnerabilityService vulnerabilityService;

    public ScoreService(VulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
    }

    public String getOverallVulnerabilityScore() {
        List<Vulnerability> allVulnerabilities = vulnerabilityService.getAllOpenVulnerabilities();

        //early return. No findings -> best rating
        if (allVulnerabilities.size() == 0) {
            return "A";
        }

        return calculateScore(allVulnerabilities);
    }

    private String calculateScore(List<Vulnerability> allOpenVulnerabilities) {
        int initialRating = 100;

        //now calculate the penalty points
        Integer score = allOpenVulnerabilities.stream()
                .map(vulnerability -> getSeverityFactor(vulnerability.getSeverity()))
                .reduce(initialRating, (currentRating, rating) -> currentRating - rating);

        if (score > 89) {
            return "A";
        } else if (score > 79) {
            return "B";
        } else if (score > 69) {
            return "C";
        } else if (score > 59) {
            return "D";
        } else if (score > 49) {
            return "E";
        } else {
            return "F";
        }
    }

    private int getSeverityFactor(Severity severity) {
        int factor = 0;

        switch (severity) {
            case LOW:
                factor = 1;
                break;
            case MODERATE:
                factor = 5;
                break;
            case HIGH:
                factor = 15;
                break;
            default:
                factor = 0;
        }

        return factor;
    }
}
